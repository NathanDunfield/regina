<sect1 id="featureset">
 <title>What does Regina do?</title>

 <para>
  A list of the more noteworthy features of &regina; is presented below.
 </para>

 <sect2 id="features-tri">
  <title>Triangulations</title>

  <para>
   The primary objects with which a user interacts when running
   &regina; are 3-manifold triangulations.  As such a large part of
   the software is devoted to the creation, analysis and manipulation of
   triangulations.
  </para>

  <sect3 id="features-tricreation">
   <title>Creation</title>

   <para>
    The following methods are supported for creating triangulations.
    <itemizedlist>
     <listitem><para>
      Manual construction of triangulations by entering
      individual tetrahedron face identifications by hand;
     </para></listitem>
     <listitem><para>
      Automatic generation of standard triangulations such as
      layered solid tori and layered lens spaces (these are particularly
      well-structured triangulations of solid tori and
      lens spaces described by Jaco and Rubinstein
      <xref linkend="bib-0-efficiency"/>,
      <xref linkend="bib-layeredlensspaces"/>);
     </para></listitem>
     <listitem><para>
      Automatic construction of &sfslong;s over the sphere
      with any number of exceptional fibres;
     </para></listitem>
     <listitem><para>
      Reconstruction of triangulations from dehydration strings
      (these are text-based representations of triangulations defined and used
      by Callahan, Hildebrand and Weeks <xref linkend="bib-cuspedcensus"/>);
     </para></listitem>
     <listitem><para>
      Importing triangulations saved from &snappeaurl;
      (the hyperbolic 3-manifold software written by Jeffrey Weeks) and
      &orburl; (the variant for 3-orbifolds and 3-manifolds written by
      Damien Heard);
     </para></listitem>
     <listitem><para>
      Automatic construction of several ready-made example triangulations.
     </para></listitem>
     </itemizedlist>
    </para>
   </sect3>

  <sect3 id="features-trianalysis">
   <title>Analysis</title>
   <para>
    Properties of a triangulation that can be computed by the software
    include the following.
    <itemizedlist>
     <listitem><para>
      Detailed combinatorial information about the skeleton and
      boundary components, including vertex links
      and the shapes formed by the various triangulation faces;
     </para></listitem>
     <listitem><para>
      A variety of homology and homotopy groups;
     </para></listitem>
     <listitem><para>
      The quantum invariants of Turaev and Viro
      <xref linkend="bib-turaevviro"/>;
     </para></listitem>
     <listitem><para>
      The Kawauchi-Kojima invariants of the torsion linking form
      <xref linkend="bib-kktorsionlinkingform"/>, and comments on
      where the triangulation might be embeddable;
     </para></listitem>
     <listitem><para>
      3-sphere and 3-ball recognition, as well as a complete connected sum
      decomposition for closed orientable triangulations;
     </para></listitem>
     <listitem><para>
      Triangulation attributes relating to the existence of particular
      types of normal surface, such as 0-efficiency <xref
      linkend="bib-0-efficiency"/>
      and the existence of splitting surfaces
      (described <link linkend="features-splitting">below</link>);
     </para></listitem>
     <listitem><para>
      Geometric properties, courtesy of the &snappea; kernel;
     </para></listitem>
     <listitem><para>
      A visual representation of the face pairing graph
      <xref linkend="bib-burton-facegraphs"/>, with the help
      of &graphviz;;
     </para></listitem>
     <listitem><para>
      Dehydration strings <xref linkend="bib-cuspedcensus"/>,
      for those triangulations that can support them.
     </para></listitem>
    </itemizedlist>
   </para>

   <para>
    Pairs of triangulations can be tested for direct isomorphism, or for
    whether one triangulation is isomorphic to a subcomplex of another.  In
    addition the software contains a variety of recognition routines for
    detecting particular well-formed structures within a
    triangulation.  These routines recognise smaller building blocks such as
    layered solid tori (mentioned above) that frequently appear within
    larger triangulations.  Furthermore, they can detect complete triangulations
    belonging to a number of infinite families described by
    Burton <xref linkend="bib-burton-phd"/>, <xref linkend="bib-burton-nor7"/>,
    <xref linkend="bib-burton-satblocks"/>,
    Martelli and Petronio <xref linkend="bib-italian9"/> and
    Matveev <xref linkend="bib-matveev6"/>.  As a
    result &regina; can frequently recognise the underlying 3-manifolds for
    well-structured triangulations that it has not previously encountered.
   </para>
  </sect3>

  <sect3 id="features-trimanipulation">
   <title>Manipulation</title>

   <para>
    For the manipulation of a triangulation, the following procedures are
    available.
    <itemizedlist>
     <listitem><para>
      Elementary moves (transformations local to a small
      number of tetrahedra), such as Pachner moves and other
      transformations described in <xref linkend="bib-burton-nor7"/>,
      many of which were suggested by Letscher;
     </para></listitem>
     <listitem><para>
      Automated simplification in which the software attempts to use
      a combination of these elementary moves to reduce the number of
      tetrahedra as far as possible, though there is no
      guarantee that the smallest possible number of tetrahedra will be
      achieved;
     </para></listitem>
     <listitem><para>
      Conversion to a 0-efficient triangulation where possible
      for closed orientable 3-manifolds <xref linkend="bib-0-efficiency"/>;
     </para></listitem>
     <listitem><para>
      Barycentric subdivision and the truncation of ideal vertices
      (vertices whose links are neither 2-spheres nor discs);
     </para></listitem>
     <listitem><para>
      Extension of the boundary to convert real boundary components into
      ideal vertices;
     </para></listitem>
     <listitem><para>
      Conversion of a non-orientable triangulation to an orientable
      double cover;
     </para></listitem>
     <listitem><para>
      Cutting along normal surfaces within a triangulation
      or crushing them to a point, as
      described <link linkend="features-surfaces">below</link>.
     </para></listitem>
    </itemizedlist>
   </para>
  </sect3>
 </sect2>

 <sect2 id="features-census">
  <title>Census Creation</title>
  <para>
   &regina; can be used to form a census of all 3-manifold triangulations
   satisfying a particular set of census constraints.
   The command-line tool
   <link linkend="man-tricensus"><command>tricensus</command></link>
   is particularly well suited for this task.
  </para>
  <para>
   Elements of the census algorithm
   are described in <xref linkend="bib-burton-nor7"/> and
   <xref linkend="bib-burton-nor10"/>.  The algorithm
   contains significant optimisations for censuses of closed minimal
   &ppirr; triangulations &mdash; in particular, the face pairing graph results
   of <xref linkend="bib-burton-facegraphs"/> and
   <xref linkend="bib-burton-nor10"/> are incorporated into the
   algorithm, as are several more local structural results relating to
   vertices, edges and faces
   <xref linkend="bib-burton-facegraphs"/>,
   <xref linkend="bib-cuspedcensus"/>, <xref linkend="bib-matveev6"/>.
  </para>
  <para>
   Census creation can require significant amounts of computing time
   (months or years in some cases).  As a result, support is provided for
   splitting this process into pieces that can be distributed across several
   machines.  An &mpi; version is also provided for use on
   high-performance clusters.
  </para>
  <para>
   In addition to forming new censuses, &regina; ships with a number of
   prepackaged censuses including closed 3-manifold triangulations
   <xref linkend="bib-burton-nor8"/>, <xref linkend="bib-burton-nor10"/>,
   hyperbolic 3-manifolds
   <xref linkend="bib-cuspedcensus"/>, <xref linkend="bib-closedhypcensus"/>,
   and knot and link complements (tabulated by Joe Christy).
   A census lookup facility for arbitrary triangulations is provided.
  </para>
 </sect2>

 <sect2 id="features-surfaces">
  <title>Normal Surfaces</title>
  <para>
   Providing a computational tool for the study of normal surfaces was in
   fact the original motivation for writing this software.  As such, &regina;
   is capable of enumerating all vertex normal surfaces or almost
   normal surfaces<footnote><para>Almost normal surfaces are closely related
   to normal surfaces and are used by Rubinstein in his 3-sphere recognition
   algorithm <xref linkend="bib-rubin-3sphere1"/>,
   <xref linkend="bib-rubin-3sphere2"/>.  &regina; only considers octagonal
   almost normal discs, and does not consider annular pieces.</para></footnote>
   of a triangulation,
   an operation required by most high-level topological algorithms that
   utilise normal surface theory.  The underlying enumeration algorithms
   are described in detail in <xref linkend="bib-burton-dd"/> and
   <xref linkend="bib-burton-convert"/>.
  </para>
  <para>
   This vertex enumeration can be performed in a variety of coordinate
   systems.  For an <replaceable>n</replaceable>-tetrahedron triangulation
   this includes the 7<replaceable>n</replaceable>
   standard triangle and quadrilateral coordinates, as well
   as the smaller set of 3<replaceable>n</replaceable> quadrilateral-only
   coordinates introduced by Tollefson for algorithmic efficiency
   <xref linkend="bib-quadspace"/>.  Likewise, for almost normal surfaces
   this includes the 10<replaceable>n</replaceable> standard coordinates
   as well as the 6<replaceable>n</replaceable> quadrilateral-octagon
   coordinates <xref linkend="bib-burton-quadoct"/>.
  </para>
  <para>
   The enumeration
   can be restricted to embedded normal surfaces or can be expanded to
   include immersed and singular surfaces.  Furthermore, elementary support
   is present for spun normal surfaces, discussed in detail by
   Tillmann <xref linkend="bib-tillus-spun"/>,
   which are non-compact surfaces with infinitely many
   discs found in ideal triangulations.
  </para>
  <para>
   For the analysis of normal surfaces, &regina; offers the following
   facilities.
   <itemizedlist>
    <listitem><para>
     Viewing normal surfaces in a variety of coordinate systems,
     including the standard and quadrilateral-only coordinates
     discussed above as well as the edge weight coordinates introduced by
     Casson;
    </para></listitem>
    <listitem><para>
     Calculating basic properties of normal surfaces such as
     Euler characteristic, orientability and one-sidedness;
    </para></listitem>
    <listitem><para>
     Recognising standard surfaces within a triangulation such
     as splitting surfaces (described
     <link linkend="features-splitting">below</link>)
     and vertex and edge links;
    </para></listitem>
    <listitem><para>
     Testing pairs of surfaces for local compatibility (compatible
     quadrilaterals and/or octagons) and global compatibility (being
     able to make the surfaces disjoint);
    </para></listitem>
    <listitem><para>
     Filtering large lists of normal surfaces by various properties
     such as Euler characteristic, orientability and boundary.
    </para></listitem>
   </itemizedlist>
  </para>
  <para>
   In addition the program can cut along a normal surface or crush it
   to a point within a triangulation.  Both operations are powerful
   tools for the analysis of the role played by a surface within a
   3-manifold.
  </para>
  <para>
   The procedure of cutting a triangulation open along a normal surface
   and retriangulating the resulting 3-manifold(s) was introduced by Haken
   <xref linkend="bib-haken-homeomorphism"/> for attacking the
   homeomorphism problem, and has been used in a variety of
   algorithms since.  The main disadvantage of this procedure is that
   the number of tetrahedra in the triangulation can grow enourmously.
   Crushing a surface to a point avoids this complexity explosion;
   however, it must be used carefully since the act of crushing can
   lose topological information or even create invalid 3-manifold
   triangulations.  The crushing operation features in Jaco and Rubinstein's
   0-efficiency algorithm <xref linkend="bib-0-efficiency"/>.
  </para>
 </sect2>

 <sect2 id="features-angles">
  <title>Angle Structures</title>
  <para>
   Angle structures, studied originally by Casson and then developed by
   Lackenby <xref linkend="bib-lackenby-taut"/>,
   <xref linkend="bib-lackenby-anglestruct"/> and
   Rivin <xref linkend="bib-rivin-structures"/>,
   <xref linkend="bib-rivin-combopt"/>,
   represent a purely
   algebraic generalisation of hyperbolic structures.  An angle structure
   on an ideal triangulation is formed by assigning an interior
   dihedral angle to each edge of every tetrahedron in such a way that
   a variety of linear equations and inequalities are satisfied.
  </para>
  <para>
   The formation of angle structures is remarkably similar to the formation
   of normal surfaces, in which a series of triangle and quadrilateral
   coordinates are assigned to every tetrahedron with a set
   of linear equations and inequalities similarly imposed upon them.  Thus
   it has been relatively straightforward to extend the normal surface
   enumeration code used by &regina; in such a way that the software can
   also enumerate vertex angle structures.
  </para>
  <para>
   Included in the requirements of an angle structure is the condition that
   each dihedral angle &theta; satisfies
   0&nbsp;&lt;=&nbsp;&theta;&nbsp;&lt;=&nbsp;&pi;.  In addition to the
   enumeration of vertex angle structures, &regina; can identify whether a
   triangulation supports any strict angle structures (for which each
   dihedral angle &theta; satisfies
   0&nbsp;&lt;&nbsp;&theta;&nbsp;&lt;&nbsp;&pi;) or any taut angle
   structures (for which each dihedral angle is precisely 0 or &pi;).
  </para>
 </sect2>

 <sect2 id="features-splitting">
  <title>Splitting Surfaces</title>
  <para>
   Splitting surfaces represent a
   particular class of normal surfaces whose presence can offer insight
   into the triangulations containing them.
   A splitting surface contains precisely one quadrilateral disc within
   each tetrahedron and no other normal or almost normal discs.
   These surfaces have a number of interesting combinatorial and topological
   properties, described in detail in <xref linkend="bib-burton-phd"/>.
  </para>
  <para>
   As mentioned earlier, &regina; can detect whether splitting surfaces
   occur within a triangulation.  It also provides support for
   splitting surface signatures, which are compact text-based representations
   from which splitting surfaces and their enclosing 3-manifold
   triangulations can be reconstructed.  In addition to reconstructing
   triangulations from signatures in this way, the software is capable of
   forming a census of all possible splitting surface signatures of a given
   size.
  </para>
 </sect2>

 <sect2 id="features-scripting">
  <title>Scripting</title>
  <para>
   &regina; offers the ability to write and run arbitrary scripts in the
   <ulink url="http://www.python.org/">&python; scripting language</ulink>.
   These scripts are essentially high-level programs with immediate access
   to the mathematical core of &regina;, and are ideal for
   performing repetitive tasks over large sets of data.  Such tasks might
   include performing a sequence of tests upon all triangulations in a
   census, or testing a prototype for a new algorithm.
   Scripts can be embedded in &regina; data files and custom libraries of
   routines can be written to share code between files.
  </para>
 </sect2>

 <sect2 id="features-interfaces">
  <title>Interfaces</title>
  <para>
   The usual method of running &regina; provides a full graphical
   interface that a user can easily understand and use.
   Alternatively, for those requiring immediate access to the
   mathematical core of the software, an interactive command-line interface
   is offered from which users can control the program using the
   &python; scripting language described above.
   A variety of specialised utility programs are also available.
  </para>
  <para>
   The mathematical core of &regina; is provided as a &cpp; library,
   which means that programmers are able to access these mathematical
   routines directly from within their own code.
  </para>
 </sect2>

 <sect2 id="features-docs">
  <title>Documentation</title>
  <para>
   Significant effort has been spent on documentation for the software.
   A full users' handbook is available for &regina;
   (you are reading this handbook now).
   In addition, the graphical user interface offers extensive assistance
   through tooltips and &quot;What's This?&quot; texts.
   For users writing &python; scripts or for programmers seeking to modify
   or extend the software, the routines offered by the underlying
   mathematical core are also fully documented.
  </para>
 </sect2>

 <sect2 id="features-datafiles">
  <title>Data Files</title>
  <para>
   The data files used for saving triangulations and other information
   conform to a well-organised hierarchical structure.  This structure not only
   allows multiple triangulations, normal surface lists and other topological
   structures to be stored together in an organised fashion but it also supports
   the storing of miscellaneous data such as text notes, &python; scripts
   and &pdf; documents.
   The file format is well documented in the users' handbook and uses
   compressed XML<footnote><para>XML is the <firstterm>Extensible Markup
   Language</firstterm>, an open and widely-supported text-based data
   format.</para></footnote>, allowing for the simple
   transfer of native &regina; data to and from other programs.
   International characters are fully supported.
  </para>
 </sect2>
</sect1>
