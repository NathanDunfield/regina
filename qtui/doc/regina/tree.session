example$ regina-python
Regina 4.95
Software for 3-manifold topology and normal surface theory
Copyright (c) 1999-2013, The Regina development team
&gt;&gt;&gt; ################################
... #
... #  Sample Python Script
... #
... #  Illustrates the traversal and manipulation of an entire packet tree.
... #
... #  See the file "tree.session" for the results of running this script.
... #
... ################################
... 
&gt;&gt;&gt; # Create a new census of finite orientable closed 3-manifold
... # triangulations with two tetrahedra.
... census = NContainer()
&gt;&gt;&gt; NCensus.formCensus(census, 2, NBoolSet.sTrue,
...     NBoolSet.sTrue, NBoolSet.sFalse, 0, 0)
16
&gt;&gt;&gt; 
&gt;&gt;&gt; # Calculate the homology of each triangulation in the census.
... # The triangulations are all children of the "census" container.
... tri = census.getFirstTreeChild()
&gt;&gt;&gt; while tri != None:
...     print tri.getPacketLabel() + ":", tri.getHomologyH1()
...     tri = tri.getNextTreeSibling()
... 
Item 1: Z_7
Item 2: Z_5
Item 3: Z
Item 4: Z_3
Item 5: Z_8
Item 6: 0
Item 7: 0
Item 8: 0
Item 9: Z_2
Item 10: 0
Item 11: 0
Item 12: Z_3
Item 13: 0
Item 14: Z_3
Item 15: 2 Z_2
Item 16: Z_2
&gt;&gt;&gt; 
&gt;&gt;&gt; # Remove all triangulations with trivial homology from the tree.
... tri = census.getFirstTreeChild()
&gt;&gt;&gt; while tri != None:
...     next = tri.getNextTreeSibling()
...     hom = tri.getHomologyH1()
...     if hom.isTrivial():
...         tri.makeOrphan()
...     tri = next
... 
&lt;regina.engine.NTriangulation object at 0x1088396e0&gt;
&lt;regina.engine.NTriangulation object at 0x108839670&gt;
&lt;regina.engine.NTriangulation object at 0x1088397c0&gt;
&lt;regina.engine.NTriangulation object at 0x108839520&gt;
&lt;regina.engine.NTriangulation object at 0x108839750&gt;
&lt;regina.engine.NTriangulation object at 0x108839670&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; # Print the homology of each remaining triangulation.
... tri = census.getFirstTreeChild()
&gt;&gt;&gt; while tri != None:
...     print tri.getPacketLabel() + ":", tri.getHomologyH1()
...     tri = tri.getNextTreeSibling()
... 
Item 1: Z_7
Item 2: Z_5
Item 3: Z
Item 4: Z_3
Item 5: Z_8
Item 9: Z_2
Item 12: Z_3
Item 14: Z_3
Item 15: 2 Z_2
Item 16: Z_2
&gt;&gt;&gt; 

